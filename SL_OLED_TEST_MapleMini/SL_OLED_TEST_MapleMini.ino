#define OLED_PIN_PW 22
#define OLED_PIN_D7 21
#define OLED_PIN_D6 20
#define OLED_PIN_D5 19
#define OLED_PIN_D4 18
#define OLED_PIN_EN 17
#define OLED_PIN_RW 16
#define OLED_PIN_RS 15






const unsigned char font[] = {
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x3E, 0x5B, 0x4F, 0x5B, 0x3E,
  0x3E, 0x6B, 0x4F, 0x6B, 0x3E,
  0x1C, 0x3E, 0x7C, 0x3E, 0x1C,
  0x18, 0x3C, 0x7E, 0x3C, 0x18,
  0x1C, 0x57, 0x7D, 0x57, 0x1C,
  0x1C, 0x5E, 0x7F, 0x5E, 0x1C,
  0x00, 0x18, 0x3C, 0x18, 0x00,
  0xFF, 0xE7, 0xC3, 0xE7, 0xFF,
  0x00, 0x18, 0x24, 0x18, 0x00,
  0xFF, 0xE7, 0xDB, 0xE7, 0xFF,
  0x30, 0x48, 0x3A, 0x06, 0x0E,
  0x26, 0x29, 0x79, 0x29, 0x26,
  0x40, 0x7F, 0x05, 0x05, 0x07,
  0x40, 0x7F, 0x05, 0x25, 0x3F,
  0x5A, 0x3C, 0xE7, 0x3C, 0x5A,
  0x7F, 0x3E, 0x1C, 0x1C, 0x08,
  0x08, 0x1C, 0x1C, 0x3E, 0x7F,
  0x14, 0x22, 0x7F, 0x22, 0x14,
  0x5F, 0x5F, 0x00, 0x5F, 0x5F,
  0x06, 0x09, 0x7F, 0x01, 0x7F,
  0x00, 0x66, 0x89, 0x95, 0x6A,
  0x60, 0x60, 0x60, 0x60, 0x60,
  0x94, 0xA2, 0xFF, 0xA2, 0x94,
  0x08, 0x04, 0x7E, 0x04, 0x08,
  0x10, 0x20, 0x7E, 0x20, 0x10,
  0x08, 0x08, 0x2A, 0x1C, 0x08,
  0x08, 0x1C, 0x2A, 0x08, 0x08,
  0x1E, 0x10, 0x10, 0x10, 0x10,
  0x0C, 0x1E, 0x0C, 0x1E, 0x0C,
  0x30, 0x38, 0x3E, 0x38, 0x30,
  0x06, 0x0E, 0x3E, 0x0E, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x5F, 0x00, 0x00,
  0x00, 0x07, 0x00, 0x07, 0x00,
  0x14, 0x7F, 0x14, 0x7F, 0x14,
  0x24, 0x2A, 0x7F, 0x2A, 0x12,
  0x23, 0x13, 0x08, 0x64, 0x62,
  0x36, 0x49, 0x56, 0x20, 0x50,
  0x00, 0x08, 0x07, 0x03, 0x00,
  0x00, 0x1C, 0x22, 0x41, 0x00,
  0x00, 0x41, 0x22, 0x1C, 0x00,
  0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
  0x08, 0x08, 0x3E, 0x08, 0x08,
  0x00, 0x80, 0x70, 0x30, 0x00,
  0x08, 0x08, 0x08, 0x08, 0x08,
  0x00, 0x00, 0x60, 0x60, 0x00,
  0x20, 0x10, 0x08, 0x04, 0x02,
  0x3E, 0x51, 0x49, 0x45, 0x3E,
  0x00, 0x42, 0x7F, 0x40, 0x00,
  0x72, 0x49, 0x49, 0x49, 0x46,
  0x21, 0x41, 0x49, 0x4D, 0x33,
  0x18, 0x14, 0x12, 0x7F, 0x10,
  0x27, 0x45, 0x45, 0x45, 0x39,
  0x3C, 0x4A, 0x49, 0x49, 0x31,
  0x41, 0x21, 0x11, 0x09, 0x07,
  0x36, 0x49, 0x49, 0x49, 0x36,
  0x46, 0x49, 0x49, 0x29, 0x1E,
  0x00, 0x00, 0x14, 0x00, 0x00,
  0x00, 0x40, 0x34, 0x00, 0x00,
  0x00, 0x08, 0x14, 0x22, 0x41,
  0x14, 0x14, 0x14, 0x14, 0x14,
  0x00, 0x41, 0x22, 0x14, 0x08,
  0x02, 0x01, 0x59, 0x09, 0x06,
  0x3E, 0x41, 0x5D, 0x59, 0x4E,
  0x7C, 0x12, 0x11, 0x12, 0x7C,
  0x7F, 0x49, 0x49, 0x49, 0x36,
  0x3E, 0x41, 0x41, 0x41, 0x22,
  0x7F, 0x41, 0x41, 0x41, 0x3E,
  0x7F, 0x49, 0x49, 0x49, 0x41,
  0x7F, 0x09, 0x09, 0x09, 0x01,
  0x3E, 0x41, 0x41, 0x51, 0x73,
  0x7F, 0x08, 0x08, 0x08, 0x7F,
  0x00, 0x41, 0x7F, 0x41, 0x00,
  0x20, 0x40, 0x41, 0x3F, 0x01,
  0x7F, 0x08, 0x14, 0x22, 0x41,
  0x7F, 0x40, 0x40, 0x40, 0x40,
  0x7F, 0x02, 0x1C, 0x02, 0x7F,
  0x7F, 0x04, 0x08, 0x10, 0x7F,
  0x3E, 0x41, 0x41, 0x41, 0x3E,
  0x7F, 0x09, 0x09, 0x09, 0x06,
  0x3E, 0x41, 0x51, 0x21, 0x5E,
  0x7F, 0x09, 0x19, 0x29, 0x46,
  0x26, 0x49, 0x49, 0x49, 0x32,
  0x03, 0x01, 0x7F, 0x01, 0x03,
  0x3F, 0x40, 0x40, 0x40, 0x3F,
  0x1F, 0x20, 0x40, 0x20, 0x1F,
  0x3F, 0x40, 0x38, 0x40, 0x3F,
  0x63, 0x14, 0x08, 0x14, 0x63,
  0x03, 0x04, 0x78, 0x04, 0x03,
  0x61, 0x59, 0x49, 0x4D, 0x43,
  0x00, 0x7F, 0x41, 0x41, 0x41,
  0x02, 0x04, 0x08, 0x10, 0x20,
  0x00, 0x41, 0x41, 0x41, 0x7F,
  0x04, 0x02, 0x01, 0x02, 0x04,
  0x40, 0x40, 0x40, 0x40, 0x40,
  0x00, 0x03, 0x07, 0x08, 0x00,
  0x20, 0x54, 0x54, 0x78, 0x40,
  0x7F, 0x28, 0x44, 0x44, 0x38,
  0x38, 0x44, 0x44, 0x44, 0x28,
  0x38, 0x44, 0x44, 0x28, 0x7F,
  0x38, 0x54, 0x54, 0x54, 0x18,
  0x00, 0x08, 0x7E, 0x09, 0x02,
  0x18, 0xA4, 0xA4, 0x9C, 0x78,
  0x7F, 0x08, 0x04, 0x04, 0x78,
  0x00, 0x44, 0x7D, 0x40, 0x00,
  0x20, 0x40, 0x40, 0x3D, 0x00,
  0x7F, 0x10, 0x28, 0x44, 0x00,
  0x00, 0x41, 0x7F, 0x40, 0x00,
  0x7C, 0x04, 0x78, 0x04, 0x78,
  0x7C, 0x08, 0x04, 0x04, 0x78,
  0x38, 0x44, 0x44, 0x44, 0x38,
  0xFC, 0x18, 0x24, 0x24, 0x18,
  0x18, 0x24, 0x24, 0x18, 0xFC,
  0x7C, 0x08, 0x04, 0x04, 0x08,
  0x48, 0x54, 0x54, 0x54, 0x24,
  0x04, 0x04, 0x3F, 0x44, 0x24,
  0x3C, 0x40, 0x40, 0x20, 0x7C,
  0x1C, 0x20, 0x40, 0x20, 0x1C,
  0x3C, 0x40, 0x30, 0x40, 0x3C,
  0x44, 0x28, 0x10, 0x28, 0x44,
  0x4C, 0x90, 0x90, 0x90, 0x7C,
  0x44, 0x64, 0x54, 0x4C, 0x44,
  0x00, 0x08, 0x36, 0x41, 0x00,
  0x00, 0x00, 0x77, 0x00, 0x00,
  0x00, 0x41, 0x36, 0x08, 0x00,
  0x02, 0x01, 0x02, 0x04, 0x02,
  0x3C, 0x26, 0x23, 0x26, 0x3C,
  0x1E, 0xA1, 0xA1, 0x61, 0x12,
  0x3A, 0x40, 0x40, 0x20, 0x7A,
  0x38, 0x54, 0x54, 0x55, 0x59,
  0x21, 0x55, 0x55, 0x79, 0x41,
  0x21, 0x54, 0x54, 0x78, 0x41,
  0x21, 0x55, 0x54, 0x78, 0x40,
  0x20, 0x54, 0x55, 0x79, 0x40,
  0x0C, 0x1E, 0x52, 0x72, 0x12,
  0x39, 0x55, 0x55, 0x55, 0x59,
  0x39, 0x54, 0x54, 0x54, 0x59,
  0x39, 0x55, 0x54, 0x54, 0x58,
  0x00, 0x00, 0x45, 0x7C, 0x41,
  0x00, 0x02, 0x45, 0x7D, 0x42,
  0x00, 0x01, 0x45, 0x7C, 0x40,
  0xF0, 0x29, 0x24, 0x29, 0xF0,
  0xF0, 0x28, 0x25, 0x28, 0xF0,
  0x7C, 0x54, 0x55, 0x45, 0x00,
  0x20, 0x54, 0x54, 0x7C, 0x54,
  0x7C, 0x0A, 0x09, 0x7F, 0x49,
  0x32, 0x49, 0x49, 0x49, 0x32,
  0x32, 0x48, 0x48, 0x48, 0x32,
  0x32, 0x4A, 0x48, 0x48, 0x30,
  0x3A, 0x41, 0x41, 0x21, 0x7A,
  0x3A, 0x42, 0x40, 0x20, 0x78,
  0x00, 0x9D, 0xA0, 0xA0, 0x7D,
  0x39, 0x44, 0x44, 0x44, 0x39,
  0x3D, 0x40, 0x40, 0x40, 0x3D,
  0x3C, 0x24, 0xFF, 0x24, 0x24,
  0x48, 0x7E, 0x49, 0x43, 0x66,
  0x2B, 0x2F, 0xFC, 0x2F, 0x2B,
  0xFF, 0x09, 0x29, 0xF6, 0x20,
  0xC0, 0x88, 0x7E, 0x09, 0x03,
  0x20, 0x54, 0x54, 0x79, 0x41,
  0x00, 0x00, 0x44, 0x7D, 0x41,
  0x30, 0x48, 0x48, 0x4A, 0x32,
  0x38, 0x40, 0x40, 0x22, 0x7A,
  0x00, 0x7A, 0x0A, 0x0A, 0x72,
  0x7D, 0x0D, 0x19, 0x31, 0x7D,
  0x26, 0x29, 0x29, 0x2F, 0x28,
  0x26, 0x29, 0x29, 0x29, 0x26,
  0x30, 0x48, 0x4D, 0x40, 0x20,
  0x38, 0x08, 0x08, 0x08, 0x08,
  0x08, 0x08, 0x08, 0x08, 0x38,
  0x2F, 0x10, 0xC8, 0xAC, 0xBA,
  0x2F, 0x10, 0x28, 0x34, 0xFA,
  0x00, 0x00, 0x7B, 0x00, 0x00,
  0x08, 0x14, 0x2A, 0x14, 0x22,
  0x22, 0x14, 0x2A, 0x14, 0x08,
  0xAA, 0x00, 0x55, 0x00, 0xAA,
  0xAA, 0x55, 0xAA, 0x55, 0xAA,
  0x00, 0x00, 0x00, 0xFF, 0x00,
  0x10, 0x10, 0x10, 0xFF, 0x00,
  0x14, 0x14, 0x14, 0xFF, 0x00,
  0x10, 0x10, 0xFF, 0x00, 0xFF,
  0x10, 0x10, 0xF0, 0x10, 0xF0,
  0x14, 0x14, 0x14, 0xFC, 0x00,
  0x14, 0x14, 0xF7, 0x00, 0xFF,
  0x00, 0x00, 0xFF, 0x00, 0xFF,
  0x14, 0x14, 0xF4, 0x04, 0xFC,
  0x14, 0x14, 0x17, 0x10, 0x1F,
  0x10, 0x10, 0x1F, 0x10, 0x1F,
  0x14, 0x14, 0x14, 0x1F, 0x00,
  0x10, 0x10, 0x10, 0xF0, 0x00,
  0x00, 0x00, 0x00, 0x1F, 0x10,
  0x10, 0x10, 0x10, 0x1F, 0x10,
  0x10, 0x10, 0x10, 0xF0, 0x10,
  0x00, 0x00, 0x00, 0xFF, 0x10,
  0x10, 0x10, 0x10, 0x10, 0x10,
  0x10, 0x10, 0x10, 0xFF, 0x10,
  0x00, 0x00, 0x00, 0xFF, 0x14,
  0x00, 0x00, 0xFF, 0x00, 0xFF,
  0x00, 0x00, 0x1F, 0x10, 0x17,
  0x00, 0x00, 0xFC, 0x04, 0xF4,
  0x14, 0x14, 0x17, 0x10, 0x17,
  0x14, 0x14, 0xF4, 0x04, 0xF4,
  0x00, 0x00, 0xFF, 0x00, 0xF7,
  0x14, 0x14, 0x14, 0x14, 0x14,
  0x14, 0x14, 0xF7, 0x00, 0xF7,
  0x14, 0x14, 0x14, 0x17, 0x14,
  0x10, 0x10, 0x1F, 0x10, 0x1F,
  0x14, 0x14, 0x14, 0xF4, 0x14,
  0x10, 0x10, 0xF0, 0x10, 0xF0,
  0x00, 0x00, 0x1F, 0x10, 0x1F,
  0x00, 0x00, 0x00, 0x1F, 0x14,
  0x00, 0x00, 0x00, 0xFC, 0x14,
  0x00, 0x00, 0xF0, 0x10, 0xF0,
  0x10, 0x10, 0xFF, 0x10, 0xFF,
  0x14, 0x14, 0x14, 0xFF, 0x14,
  0x10, 0x10, 0x10, 0x1F, 0x00,
  0x00, 0x00, 0x00, 0xF0, 0x10,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
  0xFF, 0xFF, 0xFF, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xFF, 0xFF,
  0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
  0x38, 0x44, 0x44, 0x38, 0x44,
  0x7C, 0x2A, 0x2A, 0x3E, 0x14,
  0x7E, 0x02, 0x02, 0x06, 0x06,
  0x02, 0x7E, 0x02, 0x7E, 0x02,
  0x63, 0x55, 0x49, 0x41, 0x63,
  0x38, 0x44, 0x44, 0x3C, 0x04,
  0x40, 0x7E, 0x20, 0x1E, 0x20,
  0x06, 0x02, 0x7E, 0x02, 0x02,
  0x99, 0xA5, 0xE7, 0xA5, 0x99,
  0x1C, 0x2A, 0x49, 0x2A, 0x1C,
  0x4C, 0x72, 0x01, 0x72, 0x4C,
  0x30, 0x4A, 0x4D, 0x4D, 0x30,
  0x30, 0x48, 0x78, 0x48, 0x30,
  0xBC, 0x62, 0x5A, 0x46, 0x3D,
  0x3E, 0x49, 0x49, 0x49, 0x00,
  0x7E, 0x01, 0x01, 0x01, 0x7E,
  0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
  0x44, 0x44, 0x5F, 0x44, 0x44,
  0x40, 0x51, 0x4A, 0x44, 0x40,
  0x40, 0x44, 0x4A, 0x51, 0x40,
  0x00, 0x00, 0xFF, 0x01, 0x03,
  0xE0, 0x80, 0xFF, 0x00, 0x00,
  0x08, 0x08, 0x6B, 0x6B, 0x08,
  0x36, 0x12, 0x36, 0x24, 0x36,
  0x06, 0x0F, 0x09, 0x0F, 0x06,
  0x00, 0x00, 0x18, 0x18, 0x00,
  0x00, 0x00, 0x10, 0x10, 0x00,
  0x30, 0x40, 0xFF, 0x01, 0x01,
  0x00, 0x1F, 0x01, 0x01, 0x1E,
  0x00, 0x19, 0x1D, 0x17, 0x12,
  0x00, 0x3C, 0x3C, 0x3C, 0x3C,
  0x00, 0x00, 0x00, 0x00, 0x00
};


int bmp[100][16];











byte grafic[200] = {
  B01000000, B00000000
  , B01111000, B00000000
  , B00111111, B00000000
  , B00001111, B11100000
  , B00001100, B11111000
  , B00001100, B00111111
  , B00001100, B00000111
  , B00001100, B00111111
  , B00001100, B11111000
  , B00001111, B11100000
  , B00111111, B00000000
  , B01111000, B00000000
  , B01000000, B00000000
  , B00000000, B00000000
  , B00000000, B00000000
  , B01111111, B11110000
  , B01111111, B11110000
  , B00000000, B01100000
  , B00000000, B00110000
  , B00000000, B00110000
  , B00000000, B00110000
  , B00000000, B00000000
  , B00000000, B00000000
  , B00001111, B10000000
  , B00111111, B11100000
  , B01110000, B01110000
  , B01100000, B00110000
  , B01100000, B00110000
  , B01100000, B00110000
  , B01100000, B00110000
  , B00110000, B01100000
  , B01111111, B11111111
  , B01111111, B11111111
  , B00000000, B00000000
  , B00000000, B00000000
  , B00000000, B00000000
  , B00011111, B11110000
  , B00111111, B11110000
  , B01110000, B00000000
  , B01100000, B00000000
  , B01100000, B00000000
  , B01100000, B00000000
  , B00110000, B00000000
  , B01111111, B11110000
  , B01111111, B11110000
  , B00000000, B00000000
  , B00000000, B00000000
  , B00000000, B00000000
  , B01111111, B11110011
  , B01111111, B11110011
  , B00000000, B00000000
  , B00000000, B00000000
  , B00000000, B00000000
  , B01111111, B11110000
  , B01111111, B11110000
  , B00000000, B01100000
  , B00000000, B00110000
  , B00000000, B00110000
  , B00000000, B00110000
  , B00000000, B01110000
  , B01111111, B11100000
  , B01111111, B11000000
  , B00000000, B00000000
  , B00000000, B00000000
  , B00001111, B10000000
  , B00111111, B11100000
  , B00110000, B01100000
  , B01100000, B00110000
  , B01100000, B00110000
  , B01100000, B00110000
  , B01100000, B00110000
  , B00110000, B01100000
  , B00111111, B11100000
  , B00001111, B10000000
  , B00000000, B00000000
  , B00000000, B00000000
  , B00000000, B00000000
  , B00000000, B00000000
  , B00000000, B00000000
  , B00000011, B10000000
  , B00001111, B11100000
  , B00011100, B01110000
  , B00011001, B00110000
  , B00110001, B00011000
  , B00110001, B00011000
  , B00110001, B00011000
  , B00011001, B00110000
  , B00011100, B01110000
  , B00001111, B11100000
  , B00000011, B10000000
  , B00001111, B11100000
  , B00011100, B01110000
  , B00011001, B00110000
  , B00110001, B00011000
  , B00110111, B11011000
  , B00110001, B00011000
  , B00011001, B00110000
  , B00011100, B01110000
  , B00001111, B11100000
  , B00000011, B10000000

};
static byte grafic0[20] = {
  B00000000, B00000000
  , B00000111, B11100000
  , B00001111, B11110000
  , B00011000, B00011000
  , B00010000, B00001000
  , B00010000, B00001000
  , B00011000, B00011000
  , B00001111, B11110000
  , B00000111, B11100000
  , B00000000, B00000000
};
static byte grafic1[20] = {
  B00000000, B00000000
  , B00000000, B00000000
  , B00000000, B00100000
  , B00000000, B00110000
  , B00011111, B11111000
  , B00011111, B11111000
  , B00000000, B00000000
  , B00000000, B00000000
  , B00000000, B00000000
  , B00000000, B00000000
};
static byte grafic2[20] = {
  B00000000, B00000000
  , B00000000, B00000000
  , B00011000, B01100000
  , B00011100, B01110000
  , B00010110, B00011000
  , B00010011, B00001000
  , B00010001, B10001000
  , B00010000, B11111000
  , B00010000, B01110000
  , B00000000, B00000000
};
static byte grafic3[20] = {
  B00000000, B00000000
  , B00000000, B00000000
  , B00001100, B00110000
  , B00011100, B00111000
  , B00010000, B10001000
  , B00010000, B10001000
  , B00010000, B10001000
  , B00011111, B11111000
  , B00001111, B01110000
  , B00000000, B00000000
};
static byte grafic4[20] = {
  B00000000, B00000000
  , B00000000, B00000000
  , B00000011, B00000000
  , B00000011, B10000000
  , B00000010, B11100000
  , B00000010, B01111000
  , B00011111, B11111000
  , B00011111, B11111000
  , B00000010, B00000000
  , B00000000, B00000000
};
static byte grafic5[20] = {
  B00000000, B00000000
  , B00000000, B00000000
  , B00001100, B11111000
  , B00011100, B11111000
  , B00010000, B01001000
  , B00010000, B01001000
  , B00011000, B11001000
  , B00001111, B10001000
  , B00000111, B00001000
  , B00000000, B00000000
};
static byte grafic6[20] = {
  B00000000, B00000000
  , B00000000, B00000000
  , B00001111, B11100000
  , B00011111, B11110000
  , B00011001, B10011000
  , B00010000, B10001000
  , B00010001, B10001000
  , B00011111, B10011000
  , B00001111, B00010000
  , B00000000, B00000000
};
static byte grafic7[20] = {
  B00000000, B00000000
  , B00000000, B00000000
  , B00000000, B00001000
  , B00000000, B00001000
  , B00011000, B00001000
  , B00011111, B00001000
  , B00000111, B11101000
  , B00000000, B11111000
  , B00000000, B00011000
  , B00000000, B00000000
};
static byte grafic8[20] = {
  B00000000, B00000000
  , B00001111, B01110000
  , B00011111, B11111000
  , B00010000, B10001000
  , B00010000, B10001000
  , B00010000, B10001000
  , B00011111, B11111000
  , B00001111, B01110000
  , B00000000, B00000000
  , B00000000, B00000000
};
static byte grafic9[20] = {
  B00000000, B00000000
  , B00000000, B00000000
  , B00001100, B11110000
  , B00011101, B11111000
  , B00010001, B00001000
  , B00010001, B00001000
  , B00011001, B10001000
  , B00001111, B11111000
  , B00000111, B11110000
  , B00000000, B00000000
};
static byte grafic_W[20] = {
  B00000000, B00000000
  , B00000000, B00000000
  , B00000000, B00000000
  , B00000000, B00000000
  , B00011000, B00011000
  , B00011000, B00011000
  , B00000000, B00000000
  , B00000000, B00000000
  , B00000000, B00000000
  , B00000000, B00000000
};
void setup() {
  OLED_setup();
  for (int i = 1; i < 200; i = i + 2) {
    data_write(grafic[i]);
  }
  for (int i = 0; i < 200; i = i + 2) {
    data_write(grafic[i]);
  }
  delay(100);
  displayClear();
  returnHome();

}

void loop() {

  static int count = 0;
  
  String S = String(count, DEC);
  for(int i=0;i<200;i=i+1)grafic[i]=0x00;//グラフィック変数のクリア


  /*----時間のグラフィックマッピング----*/
  int line = 180; //挿入位置 200で右端
  int k = S.length(); //文字数カウント
  for (int i = k - 1; i >= 0; i--) {
    line -= 20;
    switch (S.charAt(i)) {
      case '0':
        grafic_input(line, grafic0);
        break;
      case '1':
        grafic_input(line, grafic1);
        break;
      case '2':
        grafic_input(line, grafic2);
        break;
      case '3':
        grafic_input(line, grafic3);
        break;
      case '4':
        grafic_input(line, grafic4);
        break;
      case '5':
        grafic_input(line, grafic5);
        break;
      case '6':
        grafic_input(line, grafic6);
        break;
      case '7':
        grafic_input(line, grafic7);
        break;
      case '8':
        grafic_input(line, grafic8);
        break;
      case '9':
        grafic_input(line, grafic9);
        break;
      case ':':
        grafic_input(line, grafic_W);
        break;
    }

    
  }
  /*----表示----*/
  count++;
  
  grafic_print(grafic);//グラフィック表示
}

/*--------*/
void write4bits(uint8_t value) {
  digitalWrite(OLED_PIN_D7, (value >> 3) & 0x01);
  digitalWrite(OLED_PIN_D6, (value >> 2) & 0x01);
  digitalWrite(OLED_PIN_D5, (value >> 1) & 0x01);
  digitalWrite(OLED_PIN_D4, value & 0x01);
  pulseEnable();
}
void send(uint8_t value, uint8_t modeRS , uint8_t modeRW) {
  digitalWrite(OLED_PIN_RS, modeRS);
  digitalWrite(OLED_PIN_RW, modeRW);
  write4bits(value >> 4);
  write4bits(value);
}
void command(uint8_t value) {
  busy();
  send(value, LOW, LOW);
}
void data_write(uint8_t value) {
  busy();
  send(value, HIGH, LOW);
}
void pulseEnable() {
  digitalWrite(OLED_PIN_EN, LOW);
  delayMicroseconds(1);
  digitalWrite(OLED_PIN_EN, HIGH);
  delayMicroseconds(1);
  digitalWrite(OLED_PIN_EN, LOW);
}
void pinModeAll() {
  pinMode(OLED_PIN_RS, OUTPUT);
  pinMode(OLED_PIN_RW, OUTPUT);
  pinMode(OLED_PIN_EN, OUTPUT);
  pinMode(OLED_PIN_D4, OUTPUT);
  pinMode(OLED_PIN_D5, OUTPUT);
  pinMode(OLED_PIN_D6, OUTPUT);
  pinMode(OLED_PIN_D7, OUTPUT);
}
void busy() {
  pinMode(OLED_PIN_D7, INPUT);
  int busy = HIGH;
  while (busy) {
    digitalWrite(OLED_PIN_RS, LOW);
    digitalWrite(OLED_PIN_RW, HIGH);
    pulseEnable();
    busy = digitalRead(OLED_PIN_D7);
    pulseEnable();
  }
  pinMode(OLED_PIN_D7, OUTPUT);
}
void sync() {
  busy();
  digitalWrite(OLED_PIN_RS, LOW);
  digitalWrite(OLED_PIN_RW, LOW);
  for (int i = 0; i < 5; i++) {
    write4bits(0x0);
  }
}
void functionSet() {
  busy();
  digitalWrite(OLED_PIN_RS, LOW);
  digitalWrite(OLED_PIN_RW, LOW);
  write4bits(0x2);
  command(0x28);//Function Set[0 0 1 DL N F FT1 FT0]//
}
void displayOn() {
  command(0x0c);//Display ON/OFF Control [0 0 0 0 1 D C B]
}
void displayClear() {
  command(0x01);
}
void returnHome() {
  command(0x02);
}
void entryModeSet() {
  command(0x06);//Entry Mode Set [0 0 0 0 0 0 0 1 I/D S]
}
void graphicModeSet() {
  command(0x1f);//Cursor/Display Shift/Mode/Pwr[ 0 0 0 1 G/C PWR 1 1]
}
//{I/D:INCREMENT/DECREMENT BIT [1:右 0:左]}カソールを動かす方向
//{S:SHIFT ENTIRE DISPLAY CONTROL BIT [1:する 0:しない]}全体シフト
//{D:DISPLAY ON/OFF BIT [1:ON 0:OFF]}ディスプレイの点灯
//{C:CURSOR DISPLAY CONTROL BIT [1:ON 0:OFF]}カソールのありなし
//{B:BLINKING CONTROL BIT [1:する 0:しない]}点滅するかどうか？
//{S/C:[1:表示とカソール 0:カソール]}シフトするもの
//{R/L:[1:右 0:左]}右左
//{G/C:GRAPHIC MODE / CHARACTER MODE SELECTION [1:グラフィック 0:キャラクタ]}モード選択
//{PWR:ENABLE/DISABLE INTERNAL POWER [1:ON 0:OFF]}DCDCコンバータのON・OFF
//{DL:INTERFACE DATA LENGTH CONTROL BIT [1:8bit 0:4bit]}インタフェイス選択
//{N:NUMBER OF DISPLAY LINE [1:2行 0:1行]}行数 //グラフィックモードの時は２行にしないと11×100ドットになるらしい。
//{F:CHARACTER FONT SET [1:5×10 0:5×8]}フォントセット
//{FT1:FONT TABLE SELECTION [1: 0:]} テーブルデフォ0
//{FT0:FONT TABLE SELECTION [1: 0:]} テーブルデフォ0

/*-----------*/
void OLED_setup() { //初期化
  pinMode(OLED_PIN_PW, OUTPUT);
  digitalWrite(OLED_PIN_PW, LOW);
  delay(500);
  digitalWrite(OLED_PIN_PW, HIGH);
  delay(500);
  pinModeAll();
  sync();
  functionSet();
  displayOn();
  entryModeSet();
  graphicModeSet();
  displayClear();
  returnHome();
}
void OLED_Cursor(int col, int row) {
  command((0x80 | col));
  command((0x40 | row));
}

void grafic_input(int col, byte *p) { //表示用グラフィック書き換え
  for (int i = 1; i < 20; i = i + 2) {
    grafic[i + col] |= p[i];
  }
  for (int i = 0; i < 20; i = i + 2) {
    grafic[i + col] |= p[i];
  }
}

void grafic_print(byte *p) { //グラフィックを送信してのOLEDに表示
  returnHome();
  for (int i = 1; i < 200; i = i + 2) {
    data_write(p[i]);
  }
  for (int i = 0; i < 200; i = i + 2) {
    data_write(p[i]);
  }
}
